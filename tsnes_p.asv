function ydata = tsnes_p(P, labels,X_initial)
%TSNE_P Performs symmetric t-SNE on affinity matrix P
%
%   mappedX = tsne_p(P, labels, no_dims)
%
% The function performs symmetric t-SNE on pairwise similarity matrix P 
% to create a low-dimensional map of no_dims dimensions (default = 2).
% The matrix P is assumed to be symmetric, sum up to 1, and have zeros
% on the diagonal.
% The labels of the data are not used by t-SNE itself, however, they 
% are used to color intermediate plots. Please provide an empty labels
% matrix [] if you don't want to plot results during the optimization.
% The low-dimensional data representation is returned in mappedX.
%
%
% (C) Laurens van der Maaten, 2010
% University of California, San Diego


    if ~exist('labels', 'var')
        labels = [];
    end
    no_dims = 2;
    
    % First check whether we already have an initial solution
    if numel(no_dims) > 1
        initial_solution = true;
        ydata = no_dims;
        %no_dims = size(ydata, 2);
    else
        initial_solution = false;
    end
    
    % Initialize some variables
    n = size(P, 1);                                     % number of instances
    min_cost = 99999;
    mom_switch_iter = 800;                              % iteration at which momentum is changed
    stop_lying_iter = 1000;                              % iteration at which lying about P-values is stopped
    max_iter = 10000;                                    % maximum number of iterations
    
    momentum = 0.3;                                    % initial momentum
    final_momentum = 0.5;                               % value to which momentum is changed
    eta = 1;                                      % initial learning rate
    min_gain = 0;                                     % minimum gain for delta-bar-delta
    max_gain = 1;
    max_incs = pi;
    damping = 1;
    lie = 1;
    break_switch = 0;
    
    % Make sure P-vals are set properly
    P(1:n + 1:end) = 0;                                 % set diagonal to zero
    P = 0.5 * (P + P');                                 % symmetrize P-values
    P = max(P ./ sum(P(:)), realmin);                   % make sure P-values sum to one
    const = sum(P(:) .* log(P(:)));                     % constant in KL divergence
    if ~initial_solution
        P = P * lie;                                     % lie about the P-vals to find better local minima
    end
    
    % Initialize the solution
    if ~initial_solution
        %ydata = 0.001 .* [randn(n, 1), 2 .* randn(n, 1)];
        ydata = X_initial;
    end
    y_incs  = zeros(size(ydata));
    gains = ones(size(ydata)) ./ 1000;
    fittest_y = ydata;
    
    % Run the iterations
    for iter=1:max_iter
        % Compute joint probability that point i and j are neighbors
        w = ydata(:,1);
        j = ydata(:,2);
        cos_j = cos(j);
        sin_j = sin(j);
        num = 1 ./ (1 + real(acos(bsxfun(@times,cos_j,cos_j') .* cos(bsxfun(@minus,w,w')) + bsxfun(@times,sin_j,sin_j'))) .^ 2);
        num(1:n+1:end) = 0;                                                 % set diagonal to zero
        Q = max(num ./ sum(num(:)), realmin);                               % normalize to get probabilities
        
        % Compute the gradients
        L = (P - Q) .* num;
        %y_gard = 4 * diag(sum(L, 1)) - L) * ydata;
        ydata_dw = bsxfun(@minus, ydata(:,1),ydata(:,1)');
        ydata_dj = bsxfun(@minus, ydata(:,2),ydata(:,2)');
        ydata_dj(ydata_dj > pi) = (-2 * pi) + mod(ydata_dj(ydata_dj > pi), pi);
        ydata_dj(ydata_dj < -pi) = mod(ydata_dj(ydata_dj < -pi), 2 * pi);
        y_grads = 4 * ([sum(L .* ydata_dw, 2), sum(L .* ydata_dj, 2)]);
        
        % Update the solution
        gains = (gains * 1.025) .* (sign(y_grads) ~= sign(y_incs)) ...
            + (gains * .01) .* (sign(y_grads) == sign(y_incs));
        gains(gains < min_gain) = min_gain; 
        gains(gains > max_gain) = max_gain;
%         if find(y_incs(abs(y_incs) > max_incs))
%             damping = damping * max(max(abs(y_incs))) / max_incs;
%         end
        y_incs = (momentum * y_incs - eta * (gains .* y_grads)) ./ damping;
        ydata = ydata + y_incs;
        %ydata = bsxfun(@minus, ydata, mean(ydata, 1));
        for i = 1: size(ydata(:,1))
            x = rem(ydata(i,1), 2*pi);
            y = rem(ydata(i,2), 2*pi);
            if rem(x, pi) < 0
                x = abs(x);
                y = y + pi;
            elseif rem(x, pi) > pi
                x = pi - rem(x, pi);
                y = y +pi;
            end
            y = rem(y, 2*pi);
            if y < 0
                y = 2*pi + y;
            end
            ydata(i,:) = [x, y];
        end
        
        % Update the momentum if necessary
        if iter == mom_switch_iter
            momentum = final_momentum;
        end
        if iter == stop_lying_iter && ~initial_solution
            P = P ./ lie;
        end
        
        % Print out progress
        if ~rem(iter, 10)
            cost = const - sum(P(:) .* log(Q(:)));
            disp(['Iteration ' num2str(iter) ': error is ' num2str(cost)]);
            if cost < min_cost
                min_cost = cost;
                fittest_y = ydata;
            end
            if cost > min_cost *1.3 && break_switch
                ydata = fittest_y;
                x = bsxfun(@times,sin(ydata(:,1)),cos(ydata(:,2)));
                y = bsxfun(@times,sin(ydata(:,1)),sin(ydata(:,2)));
                z = cos(ydata(:,1));
                scatter3(x, y, z, 30, labels, 'filled');
                title(['\DeltaKL_{cur} = ', num2str(cost), ', \DeltaKL_{min} = ', num2str(min_cost)]);
                axis([-1.1, 1.1, -1.1, 1.1, -1.1, 1.1]);
                view(35,30);
                drawnow
                break
            end
            % Display scatter plot (maximally first three dimensions)
            if ~isempty(labels)
                x = bsxfun(@times,sin(ydata(:,1)),cos(ydata(:,2)));
                y = bsxfun(@times,sin(ydata(:,1)),sin(ydata(:,2)));
                z = cos(ydata(:,1));
                scatter3(x, y, z, 30, labels, 'filled');
%                 hold on
%                 for i = 1:size(ydata(:,1))
%                     dydata = ydata - y_incs;
%                     dx = bsxfun(@times,sin(dydata(:,1)),cos(dydata(:,2)));
%                     dy = bsxfun(@times,sin(dydata(:,1)),sin(dydata(:,2)));
%                     dz = cos(dydata(:,1));
%                     plot3([dx,z],[dy,y],[dz,z]);
%                 end
%                 hold off
                title(['\DeltaKL_{cur} = ', num2str(cost), ', \DeltaKL_{min} = ', num2str(min_cost), ',  \zeta = ', num2str(damping)]);
                axis([-1.1, 1.1, -1.1, 1.1, -1.1, 1.1]);
%                view(35,30);
                drawnow
            end
        end
    end
    